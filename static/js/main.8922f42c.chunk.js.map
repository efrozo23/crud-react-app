{"version":3,"sources":["Components/NavigationBar.js","Components/Welcome.js","Components/Footer.js","Components/AddUser.js","Service/PersonaService.js","Components/ListUser.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","variant","to","className","Image","src","height","width","roundedCircle","Nav","Component","Welcome","Jumbotron","Footer","date","Date","fixed","Container","Col","lg","getFullYear","AddUser","PersonaService","BASE_URL","axios","get","this","ListUser","props","updateState","item","console","log","state","personas","data","personaService","getAll","then","setState","Table","striped","bordered","hover","map","i","key","id","nombre","apellido","direccion","telefono","Button","onClick","App","marginTop","margin","Row","style","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8922f42c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Image from 'react-bootstrap/Image';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavigationBar extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <Link to={\"/\"} className=\"navbar-brand\">\r\n                    <Image src=\"https://image.flaticon.com/icons/svg/306/306232.svg\" height=\"25\" width=\"25\" roundedCircle /> Users\r\n                </Link>\r\n                <Nav className=\"mr-auto\">\r\n                    <Link to={\"add\"} className=\"nav-link\">Add User</Link>\r\n                    <Link to={\"list\"} className=\"nav-link\">List User</Link>\r\n                </Nav>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationBar;","import React, { Component } from 'react';\r\nimport { Jumbotron } from 'react-bootstrap';\r\n\r\nexport class Welcome extends Component {\r\n    render() {\r\n        return (\r\n            <Jumbotron>\r\n                <h1>Hello, world!</h1>\r\n                <p>\r\n                    This is a simple hero unit, a simple jumbotron-style component for calling\r\n                    extra attention to featured content or information.\r\n                </p>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Welcome;","import React, { Component } from 'react';\r\nimport { Navbar, Container, Col } from 'react-bootstrap';\r\n\r\nexport class Footer extends Component {\r\n  \r\n    render() {\r\n\r\n        let date = new Date()\r\n        return (\r\n            <Navbar fixed=\"bottom\" bg=\"primary\" variant=\"dark\">\r\n                <Container>\r\n                    <Col lg={12} className=\"text-center text-muted\" >\r\n                        <div className=\"text-white\">{date.getFullYear() + \"-\" + (date.getFullYear() + 1)}, All Rights Reserved by....</div>\r\n                    </Col>\r\n                </Container>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React,{Component} from 'react';\r\n\r\nexport class AddUser extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                Add user\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddUser;","import axios from 'axios';\r\n\r\n\r\nexport class PersonaService {\r\n\r\n    BASE_URL = 'http://localhost:8080/api/v1/';\r\n\r\n    getAll() {\r\n        return axios.get(this.BASE_URL + \"all\");\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { PersonaService } from '../Service/PersonaService';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport class ListUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { personas: [], data: {} };\r\n        this.personaService = new PersonaService();\r\n        console.log('ok constructor')\r\n    }\r\n\r\n    updateState = (item) => {\r\n        console.log('se ejecuto')\r\n        console.log(item)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.personaService.getAll().then(data => {\r\n            this.setState({ personas: data.data })\r\n        });\r\n        console.log('ok despues de iniciar el componente')\r\n    }\r\n\r\n    render() {\r\n        console.log('render call')\r\n        return (\r\n            <div>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>Name</th>\r\n                            <th>Lastname</th>\r\n                            <th>Address</th>\r\n                            <th>Tel</th>\r\n                            <th></th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.personas.map((item, i) => {\r\n                                return (\r\n                                    <tr key={item.id}>\r\n                                        <td>{item.id}</td>\r\n                                        <td>{item.nombre}</td>\r\n                                        <td>{item.apellido}</td>\r\n                                        <td>{item.direccion}</td>\r\n                                        <td>{item.telefono}</td>\r\n                                        <td>\r\n                                            <Button variant=\"primary\" onClick={()=>{}}>Editar</Button>\r\n                                            <Button variant=\"warning\" onClick={this.updateState}>Eiminar</Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListUser;","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport NavigationBar from './Components/NavigationBar';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Welcome from './Components/Welcome';\nimport Footer from './Components/Footer';\nimport AddUser from './Components/AddUser';\nimport ListUser from './Components/ListUser';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nexport class App extends Component {\n\n  marginTop = {\n    margin: \"20px\"\n  };\n\n  \n\n  render() {\n\n    return (\n      <Router>\n        <NavigationBar />\n        <Container>\n          <Row>\n            <Col lg={12} style={this.marginTop}>\n              <Switch>\n                <Route path=\"/\" exact component={Welcome} />\n                <Route path=\"/add\" exact component={AddUser} />\n                <Route path=\"/list\" exact component={ListUser} />\n              </Switch>\n            </Col>\n          </Row>\n        </Container>\n        <Footer />\n        \n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}